#!/user/local/bin/perl-w

###########################################################################
## Date: 02-12-2014                                                      ##
## Author: Shruti Bhide                                                  ##
## Program Description: 						 ##
## This script is written to facilitate the conversion of vcf files      ##
## generated by the illumina genome variant analyzer or by               ##
## the 01_a_convert_tsv_to_vcf_autorun.pl and                            ##
## 01_b_convert_tsv_to_vcf_manual.pl script to an excel sheet            ##
## and linking it to the IGV browser on local machine via HTML links.    ##
## Run as:                                                               ##
## perl 02_a_IGVA_tsv_to_xls_with_html_links.pl input_file.tsv	bamPath  ##
###########################################################################

use strict;
use warnings;
use Cwd;
use Win32::OLE qw(in with valof);
use Win32::OLE::Const 'Microsoft Excel';
use Win32::OLE::Variant;
use Data::Dumper;

## Excel: Die on Errors.
$Win32::OLE::Warn = 3;  

## Input file
#my $inp_tsv="test.tsv";
my $inp_tsv=$ARGV[0];
open(XS,$inp_tsv) || die "ERROR: Cannot open $inp_tsv file\n";

## Get location of bam file for sample
#my $bamLocation="E:/Data/test/test.bam"."&genome=hg19";
my $bamLocation=$ARGV[1]."&genome=hg19"; ## This need the physical path of the bam file on the users computer as it will be used by IGV to load the file.

## Maintain a list of headers and their location since that might change as we proceed with testing
my %tsv_header_hash=();
my $header_flag=0;

my $sample_name=$inp_tsv;
$sample_name=~s/\.tsv//;

## Excel Output file
my $out_xls=$sample_name."\_tsv\.xlsx";

## Get current directory using Cwd.pm
my $dir = cwd();
$dir.='/'.$out_xls;
$dir=~s/\//\\/g;

## Modify out_xls to include directory path
$out_xls=$dir;

# print $dir;
      
## Excel: Create a new Excel application
my $Excel = Win32::OLE->GetActiveObject('Excel.Application')
    || Win32::OLE->new('Excel.Application', 'Quit');

   
## Excel: Make application visible.
$Excel->{'Visible'} = 1;

## Excel: Open excel file
my $Book = $Excel->Workbooks->Add() or die "Can't open XLS file: $!\n";

## Excel: Select worksheet number 1
my $Sheet = $Book->Worksheets(1);
$Sheet->{Name}=$sample_name."_tsv";

## Keep a track of how many columns the excel sheet will have
my @Wrksht_cols=("A".."ZZ");
my $tot_cols=0;
#print Dumper @Wrksht_cols;


## Write Data to sheet
my $Exl_rowNum=3; ## Setting Exl_rowNum to 3 since first 2 are occupied by the bamfile link as well as the header
my $last_used_colmn='';
while( my $tsv_line = <XS> ){
	chomp $tsv_line;
	my @temp_data=split("\t",$tsv_line);
	## Check if file has header information and print OUT appropriate headers in excel file
	if($tsv_line=~m/^Gene\_0.*/){
		$header_flag=1;	
		$Sheet->Range("$Wrksht_cols[0]2")->{Value}="IGV_Link";
		## Format the box to add borders and Color
		&AddBorderOnAllSides("$Wrksht_cols[0]2",1);
		
		for(my $i=0; $i<scalar(@temp_data);$i++){
			## Format the box to add borders and Color
			&AddBorderOnAllSides("$Wrksht_cols[$i+1]2",1);
		
			$tot_cols=$i+1;
			$Sheet->Range("$Wrksht_cols[$i+1]2")->{Value}=$temp_data[$i];
			$tsv_header_hash{$temp_data[$i]}=$i;
			$last_used_colmn="$Wrksht_cols[$i+1]";
		}
		## 1.)Generate the header which will have an actual link to load the bam file for the first time
		$Sheet -> Range("$Wrksht_cols[0]1:$Wrksht_cols[$tot_cols-1]1") -> Merge;
		$Sheet->Hyperlinks -> Add( { Anchor  => $Sheet -> Range("$Wrksht_cols[0]1:$Wrksht_cols[$tot_cols]1"),
                                             Address => "http://localhost:60151/load?file=file:///".$bamLocation});
		## Format the box to add borders 
		&AddBorderOnAllSides("$Wrksht_cols[0]1:$Wrksht_cols[$tot_cols]1",1);
		next;
	}
	## For all the columns other than the header
	if($header_flag==0){
		print "ERROR\:Header absent in file. Please input the correct file and try again\n";
		exit;
	} else {
		my $goto_locus="chr".$temp_data[$tsv_header_hash{"Chr_2"}]."\:";
		$goto_locus.=($temp_data[$tsv_header_hash{"Coordinate_3"}])-25;
		$goto_locus.="-";
		$goto_locus.=($temp_data[$tsv_header_hash{"Coordinate_3"}])+25;
		$Sheet->Hyperlinks -> Add( { Anchor  => $Sheet -> Range("$Wrksht_cols[0]$Exl_rowNum"),
		                             Address => "http://localhost:60151/goto?locus=$goto_locus"});

		
		for(my $i=0; $i<scalar(@temp_data);$i++){
			$Sheet->Range("$Wrksht_cols[$i+1]$Exl_rowNum")->{Value}=$temp_data[$i];	
		}
		$Exl_rowNum++;
		
	}
}
print "$last_used_colmn\t$Exl_rowNum";
$Exl_rowNum-=1;
&AddBorderOnAllSides("A3:$last_used_colmn$Exl_rowNum",0);
#print Dumper %tsv_header_hash;
## Excel: Save the modified file in the desired location
$Book->SaveAs($out_xls);

## Excel: Close and quit
$Book->Close(0);
$Excel->Quit();

close XS;
exit;

### Subroutines
sub AddBorderOnAllSides {
	my ($cell_range,$color_flag)=@_;
	#print "$cell_range\t$color_flag\n";
	## Set border
	$Sheet -> Range("$cell_range") -> Borders(xlEdgeBottom) -> {Weight} = xlThin;
	$Sheet -> Range("$cell_range") -> Borders(xlEdgeLeft) -> {Weight} = xlThin;
	$Sheet -> Range("$cell_range") -> Borders(xlEdgeTop) -> {Weight} =xlThin;
	$Sheet -> Range("$cell_range") -> Borders(xlEdgeRight) -> {Weight} = xlThin;
	## Set color and formatting
	if($color_flag == 1){
		$Sheet -> Range("$cell_range") ->Interior->{ColorIndex} =15;
		$Sheet->Range("$cell_range")->Font->{Bold} = "True";
	}
}
